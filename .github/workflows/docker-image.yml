name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  unit_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --no-build --configuration Release

      - name: Publish
        run: dotnet publish --no-build --configuration Release --output ./publish
  
  build:
    runs-on: ubuntu-latest
    needs: unit_test

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Zoo/Dockerfile
          push: true
          tags: jarik01/zoo:latest
          
  security_scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      -
        name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      -
        name: Install OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
          unzip dependency-check-9.2.0-release.zip
      -
        name: Run OWASP Dependency-Check
        run: |
          ./dependency-check/bin/dependency-check.sh --project "My Project" --scan ./ --out . --format "ALL"
      -
        name: Archive vulnerability report
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: dependency-check-report.html
          
  post_deployment_verification:
    runs-on: ubuntu-latest
    needs: security_scan

    steps:
      -
        name: Perform smoke tests
        run: |
          curl https://your-app-url.com/healthcheck
      -
        name: Monitor application logs and metrics
        run: |
          cat path/to/your/log/file.txt > build_logs.txt
          grep -i "error" build_logs.txt
          echo "Uploading build logs..."
          actions/upload-artifact@v3  
            with:
              name: build-logs  # Artifact name for downloaded logs
              path: build_logs.txt
